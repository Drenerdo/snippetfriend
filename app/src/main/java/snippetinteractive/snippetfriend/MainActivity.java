package snippetinteractive.snippetfriend;

import com.google.android.glass.app.Card;
import com.google.android.glass.content.Intents;
import com.google.android.glass.media.Sounds;
import com.google.android.glass.widget.CardBuilder;
import com.google.android.glass.widget.CardScrollAdapter;
import com.google.android.glass.widget.CardScrollView;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.Context;
import android.content.Intent;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.net.Uri;
import android.os.FileObserver;
import android.provider.MediaStore;
import android.speech.RecognizerIntent;
import android.util.Log;
import android.media.AudioManager;
import android.os.Bundle;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

/**
 * An {@link Activity} showing a tuggable "Hello World!" card.
 * <p/>
 * The main content view is composed of a one-card {@link CardScrollView} that provides tugging
 * feedback to the user when swipe gestures are detected.
 * If your Glassware intends to intercept swipe gestures, you should set the content view directly
 * and use a {@link com.google.android.glass.touchpad.GestureDetector}.
 *
 * @see <a href="https://developers.google.com/glass/develop/gdk/touch">GDK Developer Guide</a>
 */
public class MainActivity extends Activity {

    /**
     * {@link CardScrollView} to use as the main content view.
     */
    private CardScrollView mCardScroller;
    private List<CardBuilder> mCards;

    String name;

    File location;

    private static final int TAKE_PICTURE_REQUEST = 1;
    private static final int SPEECH_REQUEST = 0;


    /**
     * "Hello World!" {@link View} generated by {@link #buildView()}.
     */

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        displaySpeechRecognizer();
    }

//    private void createCards() {
//        mCards = new ArrayList<CardBuilder>();
//
//        mCards.add(new CardBuilder(this, CardBuilder.Layout.TEXT)
//        .setText("This card is awesome!")
//        .setFootnote("I'm the footer!"));
//    }

    private void createCards() {
        mCards = new ArrayList<CardBuilder>();

//        Card card;
//
//        card = new Card(this);
//        card.setText(name);
//        card.setImageLayout(Card.ImageLayout.FULL);
//        Log.d("Added file", Uri.fromFile(location.getAbsoluteFile()).toString());
//        mCards.add(card);
//
//        mCardScrollView = new CardScrollView(this);
//        ExampleCardScrollAdapter adapter = new ExampleCardScrollAdapter();
//        mCardScrollView.setAdapter(adapter);
//        mCardScrollView.activate();
//        setContentView(mCardScrollView);

        mCards.add(new CardBuilder(this, CardBuilder.Layout.TEXT)
        .setText("Hello World!")
        .setFootnote("I'm the footer!"));

        mCardScroller = new CardScrollView(this);
        ExampleCardScrollAdapter adapter = new ExampleCardScrollAdapter();
        mCardScroller.setAdapter(adapter);
        mCardScroller.activate();
        setContentView(mCardScroller);

    }

    private class ExampleCardScrollAdapter extends CardScrollAdapter{

        @Override
        public int getPosition(Object item) {
            return mCards.indexOf(item);
        }

        @Override
        public int getCount() {
            return mCards.size();
        }

        @Override
        public Object getItem(int position) {
            return mCards.get(position);
        }

        @Override
        public int getViewTypeCount() {
            return CardBuilder.getViewTypeCount();
        }

        @Override
        public int getItemViewType(int position) {
            return mCards.get(position).getItemViewType();
        }

        @Override
        public View getView(int position, View convertView, ViewGroup parent) {
            return mCards.get(position).getView(convertView, parent);
        }
    }

    private void takePicture() {
        Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
        startActivityForResult(intent, TAKE_PICTURE_REQUEST);
    }

    private void displaySpeechRecognizer() {
        Intent intent = new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);
        startActivityForResult(intent, SPEECH_REQUEST);
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode,
                                       Intent data) {
        if(requestCode == SPEECH_REQUEST && resultCode == RESULT_OK) {
            List<String> results = data.getStringArrayListExtra(
                    RecognizerIntent.EXTRA_RESULTS);
            name = results.get(0);
            takePicture();
        } else if(requestCode == TAKE_PICTURE_REQUEST && resultCode == RESULT_OK) {
            String picturePath = data.getStringExtra(Intents.EXTRA_PICTURE_FILE_PATH);
            processPictureWhenReady(picturePath);
        }

        super.onActivityResult(requestCode, resultCode, data);
    }

    private void processPictureWhenReady(final String picturePath) {
        final File pictureFile = new File(picturePath);

        if (pictureFile.exists()) {
            // Picture is ready!
        } else {
            final File parentDirectory = pictureFile.getParentFile();
            FileObserver observer = new FileObserver(parentDirectory.getPath(),
                    FileObserver.CLOSE_WRITE | FileObserver.MOVED_TO) {
                private boolean isFileWritten;

                @Override
            public void onEvent(int event, String path) {
                    if(!isFileWritten) {
                        File affectedFile = new File(parentDirectory, path);
                        isFileWritten = affectedFile.equals(pictureFile);

                        if(isFileWritten) {
                            stopWatching();

                            runOnUiThread(new Runnable() {
                                @Override
                                public void run() {
                                    processPictureWhenReady(picturePath);
                                }
                            });
                        }
                    }
                }
            };
            observer.startWatching();
        }
    }
}
